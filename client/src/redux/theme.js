// This line imports a function called createSlice from the @reduxjs/toolkit package. This function is used to create a slice of state and its associated actions in Redux.
import { createSlice } from "@reduxjs/toolkit";

// Here, we define an initial state object. It has a single property theme, which is set to the value stored in the local storage under the key "theme". If there is no value in the local storage, it defaults to "light".
const initialState ={
    theme: JSON.parse(window?.localStorage.getItem("theme")) ?? "dark",
};

// This block of code creates a slice of state named "theme" using the createSlice function. It specifies the initial state defined earlier and defines a single reducer function called setTheme. This reducer function takes two arguments: state (which represents the current state) and action (which contains the payload to update the state). Inside setTheme, we update the theme property of the state with the value passed in the action's payload. Additionally, we update the value in the local storage under the key "theme" to match the new theme.
const themeSlice = createSlice({
    name: "theme",
    initialState,
    reducers: {
        setTheme(state,action){
            state.theme = action.payload;
            localStorage.setItem("theme", JSON.stringify(action.payload));
        },
    },
});

// This line exports the reducer function generated by the createSlice function. This reducer function will handle updates to the state managed by this slice whenever actions are dispatched.
export default themeSlice.reducer;

// Here, we define an action creator function named SetTheme. This function takes a value parameter, which represents the new theme value. It returns a function that receives dispatch as an argument. Inside this returned function, we dispatch the setTheme action with the provided value as its payload. This action will be processed by the reducer defined earlier, updating the state accordingly.
export function SetTheme(value){
    return (dispatch) => {
        dispatch(themeSlice.actions.setTheme(value));
    };
}